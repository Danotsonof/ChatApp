@page "/"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>SignalR Chat</PageTitle>
<h3>SignalR Chat</h3>


@if (!IsConnected)
{
    <div class="input-group">
        <input 
            @bind-value="username" 
            @bind-value:event="oninput" 
            @onkeyup="HandleUsernameInput" 
            class="form-control" 
            placeholder="What's your username (should be at least 3 non-space characters)?" >
        <button 
            class="btn btn-primary form-control-append" 
            disabled="@(!validUsername)" @onclick="Connect">
            Connect
        </button>
    </div>
}
else
{
    <textarea 
        style="width: 100%; height: 500px;" 
        @ref="TextAreaRef" disabled>
        @messages
    </textarea>
    <div class="input-group">
        <input 
            @bind-value="message"
            @bind-value:event="oninput"
            @onkeyup="HandleInput"
            class="form-control"
            placeholder="input your text"
        >
        <button class="btn btn-primary form-group-append" @onclick="Send" disabled="@(!IsConnected || string.IsNullOrWhiteSpace(message))">
            Send</button>
    </div>
}

@code {
    private HubConnection? hubConnection;
    private string messages = string.Empty;
    private string username = string.Empty;
    private string message = string.Empty;
    private bool validUsername = false;
    ElementReference TextAreaRef;

    private async Task Connect()
    {
        username = username?.Trim().ToLower();

        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={username}"))
        .Build();

        hubConnection.On<string, string>("GeneralRoom", (user, message) =>
        {
            var msg = $"{(string.IsNullOrWhiteSpace(user) ? "" : user + " : ")}{message}";
            messages += msg + "\n";
            JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            StateHasChanged();
        });

        hubConnection.On<string>("Alert", user =>
        {
            JSRuntime.InvokeVoidAsync("alert", $"{user} is already selected, choose another username."); // Alert
            return;
            //bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?"); // Confirm
            //string prompted = await JsRuntime.InvokeAsync<string>("prompt", "Take some input:"); // Prompt
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        message = message?.Trim();
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("AddMessageToChat", username, message);
            message = string.Empty;
        }
    }

    private async Task HandleUsernameInput(KeyboardEventArgs args)
    {
        if (username?.Trim().Length > 2)
            validUsername = true;
        else
            validUsername = false;

        if (args.Key.Equals("Enter") && validUsername)
        {
            await Connect();
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter") && !string.IsNullOrWhiteSpace(message))
        {
            await Send();
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}